{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedData","data","addedCommentHandler","useCallback","console","log","length","onClick","HighlightedQuote","quote","author","QuoteDetails","match","useRouteMatch","getSingleQuote","path","url","exact","to"],"mappings":"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","file":"static/js/3.a86150a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useEffect, useRef } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../services/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = ( props ) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp( addComment );\n\n  const { onAddedComment } = props;\n\n  useEffect( () => {\n    if ( status === 'completed' )\n    {\n      onAddedComment();\n    }\n  }, [ status, error, onAddedComment ] );\n\n  const submitFormHandler = ( event ) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest( {\n      commentData: { text: enteredText },\n      quoteId: props.quoteId\n    } );\n  };\n\n  return (\n    <form className={ classes.form } onSubmit={ submitFormHandler }>\n      { status === 'pending' && ( <div className='centered'><LoadingSpinner /></div> ) }\n      <div className={ classes.control } onSubmit={ submitFormHandler }>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={ commentTextRef }></textarea>\n      </div>\n      <div className={ classes.actions }>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../services/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [ isAddingComment, setIsAddingComment ] = useState( false );\n  const params = useParams();\n  const { sendRequest, status, data: loadedData, error } = useHttp( getAllComments );\n  const { quoteId } = params;\n\n  useEffect( () => {\n    sendRequest( quoteId );\n  }, [ quoteId, sendRequest, error ] );\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment( true );\n  };\n  const addedCommentHandler = useCallback( () => {\n    sendRequest( quoteId );\n  }, [ quoteId, sendRequest ] );\n\n  let comments;\n\n\n  if ( status === 'pending' )\n  {\n    console.log( loadedData );\n    comments = <div className='centered'>\n      <LoadingSpinner />\n    </div>;\n  }\n\n  if ( status === 'completed' && ( loadedData ) )\n  {\n    comments = <CommentsList comments={ loadedData } />;\n  }\n\n  if ( status === 'completed' && ( !loadedData || loadedData.length === 0 ) )\n  {\n    comments = <p className='centered'>No comments added yet!</p>;\n  }\n\n  return (\n    <section className={ classes.comments }>\n      <h2>User Comments</h2>\n      { !isAddingComment && (\n        <button className='btn' onClick={ startAddCommentHandler }>\n          Add a Comment\n        </button>\n      ) }\n      { isAddingComment && <NewCommentForm quoteId={ params.quoteId } onAddedComment={ addedCommentHandler } /> }\n      { comments }\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport { getSingleQuote } from \"../services/api\";\nimport useHttp from \"../hooks/use-http\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst QuoteDetails = () => {\n    const match = useRouteMatch();\n    const params = useParams();\n    const { sendRequest, status, data: loadedData, error } = useHttp( getSingleQuote, true );\n\n    useEffect( () => {\n        sendRequest( params.quoteId );\n    }, [ sendRequest, params.quoteId ] );\n\n    if ( status === 'pending' )\n    {\n        return <div className=\"centered\">\n            <LoadingSpinner />\n        </div>;\n    }\n\n    if ( error )\n    {\n        return <p className=\"centered\">{ error }</p>;\n    }\n\n    if ( !loadedData.text )\n    {\n        return <p>No Quote Found</p>;\n    }\n\n    return <div>\n        <HighlightedQuote\n            author={ loadedData.author }\n            text={ loadedData.text } />\n        <Route path={ match.url } exact>\n            <div className=\"centered\"><Link className=\"btn--flat\" to={ `${ match.url }/comments` }>Load comments</Link></div>\n        </Route>\n\n        <Route path={ `${ match.path }/comments` }>\n            <Comments />\n        </Route>\n    </div>;\n};\n\nexport default QuoteDetails;"],"sourceRoot":""}